from collections import namedtuple, defaultdict
from datetime import datetime,timedelta
import requests
import pprint
import os
import time

os.environ['NLS_LANG'] = '.UTF8'

from trustpilot import client
import pandas as pd
import cx_Oracle

dsn_tns = cx_Oracle.makedsn(host= '',port= 1521, service_name= '')
conn =  cx_Oracle.connect(user= '',password = '', dsn=dsn_tns)
cur = conn.cursor()  #connected

def truncate_table():
    sql_qu1 = ''' 
   
    truncate table SMARTFOCUS.JS_ORACLE_NDF_API_stg
    
    '''
    try:
        cur.execute(sql_qu1) #need to change the table name
    except cx_Oracle.DatabaseError as err:
            error = err.args[0]
            if error.code == 942:
                print('Oracle error message:', error.message)
                print('As DROP statement continuing')
            else:
                 raise err     

truncate_table()

end_date = datetime.utcnow().replace(minute=0, hour=0, second=0, microsecond=0)  #Todays date
start_date = end_date - timedelta(days=1)   # Yesterdays date

GET_APIS_URL = 'https://login.eloqua.com/id'
REST_API_URL = 'https://secure.p06.eloqua.com/API/REST/{version}/'
FORM_DATA_URL = REST_API_URL + 'data/customObject/{id}/instances'



url = FORM_DATA_URL + '?count={count}&page={page}'
# Split this into a couple methods or functions
if start_date and end_date:
    url = url + '&startAt={startAt}&endAt={endAt}'
    page =1
#url = url + '&createdAt={startAt}'
while True:
    if start_date and end_date:
        req = requests.get(
            url.format(
                version=2.0,
                id =36,
                count=1000,
                page=page,
                startAt=int(time.mktime(start_date.timetuple())),
                endAt=int(time.mktime(end_date.timetuple()))
            ),
            auth=('yelluk\jaspreet.singh', 'SmallPox8-') 
        )
    else:
        req = requests.get(
            url.format(
                version=2.0,
                id=36,
                count=1000,
                page=page,
            ),
            auth=('yelluk\jaspreet.singh', 'SmallPox8-') 
        )
    # need to build something to catch HTTP response errors
    py_data = req.json()
    try:
        py_data['elements']
    except TypeError as err:
        pprint.pprint(py_data)
        raise err

    # Break if there are no more records
    if not py_data['elements']:
        break

    #print(form_page)
    page +=1


    for value in py_data['elements']:
        try:
            Eloqua_Unique_Identifier = value['uniqueCode']
        except:
            Eloqua_Unique_Identifier = None
        try:
            Date_Created = datetime.utcfromtimestamp(
                int(value['createdAt'])).strftime('%Y-%m-%d %H:%M:%S')
        except:
            Date_Created = None    
        try:
            Date_Modified = datetime.utcfromtimestamp(
                int(value['updateAt'])).strftime('%Y-%m-%d %H:%M:%S')
        except:
            Date_Modified = None      
    
    
    
        for v in value['fieldValues']:
            if v['id'] == '460': 
                try:
                    company_name = v['value']
                except:
                    company_name = None
    
            if v['id'] == '490': 
                try:
                    Matching_Key = v['value']
                except:
                    Matching_Key = None
    
            if v['id'] == '462': 
                try:
                    Mapped_Account_id = v['value']
                except:
                    Mapped_Account_id = None
                    
            if v['id'] == '486': 
                try:
                    Mapped_Contact_id = v['value']
                except:
                    Mapped_Contact_id = None
    
        
            if v['id'] == '459': 
                try:
                    Phone_1 = v['value']
                except:
                    Phone_1 = None
    
            if v['id'] == '461': 
                try:
                    Phone_2 = v['value']
                except:
                    Phone_2 = None
                    
            if v['id'] == '464': 
                try:
                   Phone_3 = v['value']
                except:
                   Phone_3 = None
            if v['id'] == '463':
                try:
                   Website = v['value']
                except:
                   Website = None	
            if v['id'] == '479':
                try:
                   Email = v['value']
                except:
                   Email = None		
            if v['id'] == '465':
                try:
                   Image_Url = v['value']
                except:
                   Image_Url = None
            if v['id'] == '520':
                try:
                   Address_1 = v['value']
                except:
                   Address_1 = None			
            if v['id'] == '521':
                try:
                   Address_2 = v['value']
                except:
                   Address_2 = None				
            if v['id'] == '522':
                try:
                   Town = v['value']
                except:
                   Town = None			
            if v['id'] == '523':
                try:
                    County = v['value']
                except:
                    County = None
            if v['id'] == '524':
                try:
                    Postcode = v['value']
                except:
                    Postcode = None
            if v['id'] == '466':
                try:
                    Additional_Information = v['value']
                except:
                    Additional_Information = None
            if v['id'] == '468':
                try:
                    Submitted_at = v['value']
                except:
                    Submitted_at = None
            if v['id'] == '467':
                try:
                    Submitted_by = v['value']
                except:
                    Submitted_by = None
            if v['id'] == '475':
                try:
                    Material_Type = v['value']
                except:
                    Material_Type = None	
            if v['id'] == '476':
                try:
                    Publication_Name = v['value']
                except:
                    Publication_Name = None				
            if v['id'] == '477':
                try:
                    Advert_URL = v['value']
                except:
                    Advert_URL = None				
            if v['id'] == '470':
                try:
                    Lead_Source = v['value']
                except:
                    Lead_Source = None				
            if v['id'] == '472':
                try:
                    Lead_Category = v['value']
                except:
                    Lead_Category = None
            if v['id'] == '473':
                try:
                    Allocation = v['value']
                except:
                    Allocation = None
            if v['id'] == '478':
                try:
                    Allocation_email = v['value']
                except:
                    Allocation_email = None
        #print(Eloqua_Unique_Identifier,Date_Created,Date_Modified,company_name,Matching_Key,Mapped_Account_id,Mapped_Contact_id,Phone_1,Phone_2,Phone_3,Website,Email,Image_Url,Address_1,Address_2,Town,County,Postcode,Additional_Information,Submitted_at,Submitted_by,Material_Type,Publication_Name,Advert_URL,Lead_Source,Lead_Category,Allocation,Allocation_email)
    
        def dynamic_data_entry():
            rows = (company_name,Matching_Key ,Mapped_Account_id ,Mapped_Contact_id,Phone_1 ,Phone_2 ,Phone_3 ,Website ,Email 
            ,Image_Url,Address_1 ,Address_2 ,Town ,County ,Postcode ,Additional_Information ,Submitted_at ,Submitted_by 
            ,Material_Type ,Publication_Name,Advert_URL ,Lead_Source ,Lead_Category ,Allocation
            ,Allocation_email ,Eloqua_Unique_Identifier ,Date_Created,Date_Modified)
    
            
        #Perpare tells sql which Columns you are inserting , again cur is the way we talk to oracle
            cur.prepare( 'insert into SMARTFOCUS.JS_Oracle_NDF_API_Stg values(:company_name, :Matching_Key, :Mapped_Account_id, :Mapped_Contact_id, :Phone_1, :Phone_2, :Phone_3, :Website, :Email, :Image_Url, :Address_1, :Address_2, :Town, :County, :Postcode, :Additional_Information, :Submitted_at, :Submitted_by, :Material_Type, :Publication_Name, :Advert_URL , :Lead_Source, :Lead_Category, :Allocation, :Allocation_email, :Eloqua_Unique_Identifier,:Date_Created, :Date_Modified )')
            #execute means run 
            cur.execute(None,  {
            'company_name':rows[0],
            'Matching_Key':rows[1],
            'Mapped_Account_id': rows[2],
            'Mapped_Contact_id':rows[3],
            'Phone_1':rows[4],
            'Phone_2': rows[5], 
            'Phone_3': rows[6],
            'Website':rows[7],
            'Email': rows[8],
            'Image_Url': rows[9] ,
            'Address_1': rows[10] ,
            'Address_2': rows[11] ,
            'Town': rows[12], 
            'County': rows[13],  
            'Postcode': rows[14] ,
            'Additional_Information': rows[15]  ,
            'Submitted_at': rows[16] ,
            'Submitted_by': rows[17] ,
            'Material_Type': rows[18]  ,
            'Publication_Name': rows[19] ,
            'Advert_URL': rows[20] ,
            'Lead_Source': rows[21] ,
            'Lead_Category': rows[22] ,
            'Allocation': rows[23] ,
            'Allocation_email': rows[24]  ,
            'Eloqua_Unique_Identifier': rows[25],
            'Date_Created': rows[26],
            'Date_Modified': rows[27]
        }
        )
        dynamic_data_entry()

def merger_sql():
    sql_query = ( '''
        
            merge into smartfocus.JS_Oracle_NDF_API tbl
            using (
            select Distinct
            company_name 
            ,Matching_Key 
            ,Mapped_Account_id 
            ,Mapped_Contact_id 
            ,Phone_1 
            ,Phone_2 
            ,Phone_3 
            ,Website 
            ,Email 
            ,Image_Url 
            ,Address_1 
            ,Address_2
            ,Town 
            ,County 
            ,Postcode 
            ,Additional_Information 
            ,Submitted_at
            ,Submitted_by
            ,Material_Type
            ,Publication_Name
            ,Advert_URL
            ,Lead_Source
            ,Lead_Category
            ,Allocation
            ,Allocation_email 
            ,Eloqua_Unique_Identifier
            ,TO_DATE(Date_Created,'yyyy/mm/dd hh24:mi:ss')  Date_Created
            ,TO_DATE(Date_Modified,'yyyy/mm/dd hh24:mi:ss') Date_Modified
            from smartfocus.JS_Oracle_NDF_API_Stg  
            )stg
            on (tbl.Eloqua_Unique_Identifier = stg.Eloqua_Unique_Identifier
            and tbl.Date_Created = stg.Date_Created)


            when not matched then
            insert
            (
            tbl.company_name 
            ,tbl.Matching_Key 
            ,tbl.Mapped_Account_id 
            ,tbl.Mapped_Contact_id 
            ,tbl.Phone_1 
            ,tbl.Phone_2 
            ,tbl.Phone_3 
            ,tbl.Website 
            ,tbl.Email 
            ,tbl.Image_Url 
            ,tbl.Address_1 
            ,tbl.Address_2
            ,tbl.Town 
            ,tbl.County 
            ,tbl.Postcode 
            ,tbl.Additional_Information 
            ,tbl.Submitted_at
            ,tbl.Submitted_by
            ,tbl.Material_Type
            ,tbl.Publication_Name
            ,tbl.Advert_URL
            ,tbl.Lead_Source
            ,tbl.Lead_Category
            ,tbl.Allocation
            ,tbl.Allocation_email 
            ,tbl.Eloqua_Unique_Identifier
            ,tbl.Date_Created 
            ,tbl.Date_Modified
            )
            values 
            (
            stg.company_name 
            ,stg.Matching_Key 
            ,stg.Mapped_Account_id 
            ,stg.Mapped_Contact_id 
            ,stg.Phone_1 
            ,stg.Phone_2 
            ,stg.Phone_3 
            ,stg.Website 
            ,stg.Email 
            ,stg.Image_Url 
            ,stg.Address_1 
            ,stg.Address_2
            ,stg.Town 
            ,stg.County 
            ,stg.Postcode 
            ,stg.Additional_Information 
            ,stg.Submitted_at
            ,stg.Submitted_by
            ,stg.Material_Type
            ,stg.Publication_Name
            ,stg.Advert_URL
            ,stg.Lead_Source
            ,stg.Lead_Category
            ,stg.Allocation
            ,stg.Allocation_email 
            ,stg.Eloqua_Unique_Identifier
            ,stg.Date_Created 
            ,stg.Date_Modified 
            ) 
            
    ''') 

    try:
        cur.execute(sql_query)
    except cx_Oracle.DatabaseError as err:
            error = err.args[0]
            if error.code == 942:
                print('Oracle error message:', error.message)
                print('As DROP statement continuing')
            else:
                raise err
        
merger_sql()

conn.commit()
conn.close()
    
